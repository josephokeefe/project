Hello - from /Users/josephokeefe/.vscode/extensions/jaredly.reason-vscode-1.5.2/bin.native
Previous log location: /var/folders/kj/pcr_r9wx381_0pfz04y5vhvm0000gn/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json", "globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","format_width":"80","per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","languageId":"ocaml","version":1,"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar ex1), ex2)\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 2, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":54},"end":{"line":143,"character":54}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 3, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":138,"character":7}}}
[server] Got a method textDocument/hover
[server] processing took 0.0228881835938ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":141,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 5, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":138,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":151,"character":63}}}
[server] Got a method textDocument/hover
[server] processing took 0.0181198120117ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":54}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":56}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":2},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar ex1, ex2)\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 10, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":53},"end":{"line":143,"character":53}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":53},"end":{"line":143,"character":53}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":51}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":52}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":52},"end":{"line":143,"character":52}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0221729278564ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 15, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":53},"end":{"line":143,"character":53}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":50},"end":{"line":143,"character":50}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":4},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar reex1, ex2)\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 18, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":52},"end":{"line":143,"character":52}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":6},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar replex1, ex2)\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 20, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":54},"end":{"line":143,"character":54}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 21, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":7},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1, ex2)\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 22, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":55},"end":{"line":143,"character":55}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":55},"end":{"line":143,"character":55}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 24, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":56}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 25, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":58},"end":{"line":143,"character":58}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0309944152832ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":8},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), ex2)\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0219345092773ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 27, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":59},"end":{"line":143,"character":59}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 28, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":59},"end":{"line":143,"character":59}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 29, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":30,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":63}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 30, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":63},"end":{"line":143,"character":63}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0221729278564ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 31, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":64}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 32, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":64},"end":{"line":143,"character":64}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 33, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":58}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 34, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":35},"end":{"line":143,"character":59}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 35, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":36},"end":{"line":143,"character":59}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 36, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":36}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 37, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":54}}}
[server] Got a method textDocument/definition
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 38, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":63}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 39, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":63},"end":{"line":143,"character":63}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 40, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":64},"end":{"line":143,"character":64}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 41, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":9},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), ex)\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":10},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), e)\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 42, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":62},"end":{"line":143,"character":62}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 43, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":62},"end":{"line":143,"character":62}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 44, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":11},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), )\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":45,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 45, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":61},"end":{"line":143,"character":61}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 46, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":12},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst newVar repl ex1))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":47,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 47, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":48,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":84},"end":{"line":143,"character":84}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 48, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":49,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":84},"end":{"line":143,"character":84}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 49, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":50,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":83}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 50, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":51,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":83},"end":{"line":143,"character":83}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0219345092773ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 51, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":13},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst newVar repl ex))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":14},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst newVar repl ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":52,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":83},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 52, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":53,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 53, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":54,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":83},"end":{"line":143,"character":83}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 54, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":55,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":83},"end":{"line":143,"character":83}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 55, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":56,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":70}}}
[server] Got a method textDocument/hover
[server] processing took 0.0379085540771ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 56, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":57,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":69}}}
[server] Got a method textDocument/hover
[server] processing took 0.0319480895996ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 57, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":58,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":81}}}
[server] Got a method textDocument/hover
[server] processing took 0.0259876251221ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 58, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":59,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":85},"end":{"line":143,"character":85}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0259876251221ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 59, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":60,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.028133392334ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 60, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":61,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0190734863281ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 61, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":62,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":24},"end":{"line":143,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0269412994385ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 62, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":63,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0269412994385ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 63, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":64,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 64, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":65,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":151,"character":46}}}
[server] Got a method textDocument/hover
[server] processing took 0.0271797180176ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 65, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":66,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":144,"character":61}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 66, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":67,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":64}}}
[server] Got a method textDocument/hover
[server] processing took 0.0171661376953ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 67, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":68,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":144,"character":65}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 68, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":69,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":144,"character":64}}}
[server] Got a method textDocument/hover
[server] processing took 0.0250339508057ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 69, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":70,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":144,"character":63}}}
[server] Got a method textDocument/hover
[server] processing took 0.0178813934326ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 70, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":71,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":144,"character":62}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 71, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":72,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":65}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 72, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":73,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":65},"end":{"line":143,"character":65}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 73, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":74,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":67}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 74, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":75,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":68}}}
[server] Got a method textDocument/hover
[server] processing took 0.0259876251221ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 75, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":76,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":144,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.0278949737549ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 76, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":77,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":59}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 77, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":78,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":58}}}
[server] Got a method textDocument/hover
[server] processing took 0.0319480895996ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 78, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":79,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":58}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 79, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":80,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":58},"end":{"line":143,"character":58}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0271797180176ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 80, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":81,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":45},"end":{"line":143,"character":58}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 81, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":82,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":41},"end":{"line":143,"character":58}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 82, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":83,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":72}}}
[server] Got a method textDocument/hover
[server] processing took 0.0290870666504ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 83, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":84,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":142,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0171661376953ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 84, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":85,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":142,"character":26},"end":{"line":142,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0262260437012ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 85, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":86,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":74}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 86, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":87,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":71}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 87, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":88,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":71},"end":{"line":143,"character":71}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 88, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":89,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":68},"end":{"line":143,"character":74}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0162124633789ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 89, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":90,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":71}}}
[server] Got a method textDocument/hover
[server] processing took 0.0162124633789ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 90, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":91,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":138,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.032901763916ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 91, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":92,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.0171661376953ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 92, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":93,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":47}}}
[server] Got a method textDocument/hover
[server] processing took 0.0171661376953ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 93, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":94,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":75}}}
[server] Got a method textDocument/hover
[server] processing took 0.0171661376953ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 94, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":95,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":70}}}
[server] Got a method textDocument/hover
[server] processing took 0.0240802764893ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 95, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":96,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":74}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0181198120117ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 96, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":97,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":68},"end":{"line":143,"character":74}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0269412994385ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 97, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":98,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":76}}}
[server] Got a method textDocument/hover
[server] processing took 0.0181198120117ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 98, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":99,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":76}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 99, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":100,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":75},"end":{"line":143,"character":79}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0269412994385ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 100, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":15},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst newVar  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":101,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0250339508057ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 101, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":102,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":65}}}
[server] Got a method textDocument/hover
[server] processing took 0.0309944152832ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 102, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":103,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":58}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 103, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":104,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":53},"end":{"line":143,"character":59}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 104, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":105,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":35},"end":{"line":143,"character":59}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 105, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":106,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":36},"end":{"line":143,"character":59}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 106, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":107,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":56}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 107, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":108,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":69}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 108, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":109,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":74}}}
[server] Got a method textDocument/hover
[server] processing took 0.0269412994385ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 109, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":110,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":74}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 110, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":111,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":74},"end":{"line":143,"character":74}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 111, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":112,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":74}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 112, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":113,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":74}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 113, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":114,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":71}}}
[server] Got a method textDocument/hover
[server] processing took 0.0238418579102ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 114, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":115,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":65}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 115, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":116,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":70}}}
[server] Got a method textDocument/hover
[server] processing took 0.0250339508057ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 116, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":117,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":71}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 117, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":118,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":68},"end":{"line":143,"character":74}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0269412994385ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 118, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":119,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":127,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 119, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":120,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":144,"character":61}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 120, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":121,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":69}}}
[server] Got a method textDocument/hover
[server] processing took 3.88193130493ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 121, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":122,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":63}}}
[server] Got a method textDocument/hover
[server] processing took 0.028133392334ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 122, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":123,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":71}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 123, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":124,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":74}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 124, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":125,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":68},"end":{"line":143,"character":74}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0259876251221ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 125, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":16},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst v  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":126,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":69},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 126, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":19},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vail  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":127,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0197887420654ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 127, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":128,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":72},"end":{"line":143,"character":72}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 128, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":129,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":72},"end":{"line":143,"character":72}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 129, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":20},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vai  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":130,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0228881835938ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 130, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":131,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":71},"end":{"line":143,"character":71}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0197887420654ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 131, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":21},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":132,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0288486480713ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 132, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":133,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":72},"end":{"line":143,"character":72}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0350475311279ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 133, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":134,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":72},"end":{"line":143,"character":72}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 134, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":22},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid   ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":135,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0309944152832ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 135, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":136,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":141,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.0419616699219ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 136, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":137,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":142,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.0259876251221ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 137, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":138,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":142,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 138, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":139,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":142,"character":26},"end":{"line":142,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.028133392334ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 139, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":140,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":144,"character":41}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 140, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":141,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":67}}}
[server] Got a method textDocument/hover
[server] processing took 0.0319480895996ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 141, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":23},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid V  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":142,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":74},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 142, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":25},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":143,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 143, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":144,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":76},"end":{"line":143,"character":76}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 144, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":27},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var()  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":145,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":78}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 145, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":146,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 146, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":147,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":78},"end":{"line":143,"character":78}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 147, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":148,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":77},"end":{"line":143,"character":77}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 148, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":28},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(n)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":149,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":78},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0100135803223ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 149, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":30},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(new)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":150,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 150, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":151,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":80},"end":{"line":143,"character":80}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 151, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":32},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newBa)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":152,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":82},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 152, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":33},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newBar)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":153,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":83},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 153, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":154,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 154, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":155,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":83},"end":{"line":143,"character":83}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 155, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":36},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(new)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":37},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newV)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":156,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":81},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 156, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":39},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":157,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 157, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":158,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":83},"end":{"line":143,"character":83}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0650882720947ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 158, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":159,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":83},"end":{"line":143,"character":83}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 159, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":160,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":67}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 160, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":161,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":67},"end":{"line":140,"character":67}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 161, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":39},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":39}}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":162,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":67},"end":{"line":140,"character":67}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 162, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":163,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":67},"end":{"line":140,"character":67}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 163, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":164,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":146,"character":15},"end":{"line":146,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 164, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":165,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":133,"character":51}}}
[server] Got a method textDocument/hover
[server] processing took 0.0171661376953ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 165, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":166,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":133,"character":52}}}
[server] Got a method textDocument/definition
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 166, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":42},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(new)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":167,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0309944152832ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 167, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":168,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":80},"end":{"line":143,"character":80}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0219345092773ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 168, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":169,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":80},"end":{"line":143,"character":80}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 169, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":43},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(ne)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":170,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0269412994385ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 170, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":171,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":79},"end":{"line":143,"character":79}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 171, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":172,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":79},"end":{"line":143,"character":79}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 172, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":44},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(new)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":173,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 173, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":174,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":80},"end":{"line":143,"character":80}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 174, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":45},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newB)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":175,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":81},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 175, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":176,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 176, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":177,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":81},"end":{"line":143,"character":81}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 177, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":46},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newBa)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":178,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":82},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 178, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":179,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 179, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":180,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":82},"end":{"line":143,"character":82}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 180, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":47},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newB)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":181,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 181, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":182,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":81},"end":{"line":143,"character":81}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 182, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":183,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":81},"end":{"line":143,"character":81}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 183, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":48},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(new)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":49},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newV)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":184,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":81},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 184, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":51},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst new repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":185,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 185, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":186,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":83},"end":{"line":143,"character":83}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 186, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":187,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":83},"end":{"line":143,"character":83}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 187, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":188,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":138,"character":71}}}
[server] Got a method textDocument/hover
[server] processing took 0.0228881835938ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 188, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":189,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":71}}}
[server] Got a method textDocument/hover
[server] processing took 0.0240802764893ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 189, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":190,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":69}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 190, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":191,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":69}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 191, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":192,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":67},"end":{"line":140,"character":70}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0309944152832ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 192, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":193,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":69}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 193, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":194,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":70}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 194, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":195,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":67},"end":{"line":140,"character":70}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 195, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":196,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":69}}}
[server] Got a method textDocument/hover
[server] processing took 0.0259876251221ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 196, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":197,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":70}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 197, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":198,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":67},"end":{"line":140,"character":70}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0269412994385ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 198, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":199,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":70}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0162124633789ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 199, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":200,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":67},"end":{"line":140,"character":70}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0190734863281ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 200, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":52},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst v repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":201,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":68},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 201, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":54},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst var repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":202,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 202, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":203,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":70},"end":{"line":140,"character":70}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 203, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":204,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":70},"end":{"line":140,"character":70}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 204, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":55},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst var_ repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":205,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 205, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":206,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":71},"end":{"line":140,"character":71}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 206, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":59},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst var_Name repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":207,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 207, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":208,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":75},"end":{"line":140,"character":75}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 208, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":209,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":137,"character":49}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.108003616333ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 209, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":59},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst var_Name repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":59}}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":210,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":137,"character":49},"end":{"line":137,"character":49}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 210, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":211,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":137,"character":49},"end":{"line":137,"character":49}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 211, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":212,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":83}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 212, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":213,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":75}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 213, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":214,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":74}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 214, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":215,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":74}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 215, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":216,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":74},"end":{"line":140,"character":74}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0219345092773ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 216, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":217,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":73},"end":{"line":140,"character":73}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 217, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":218,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":72},"end":{"line":140,"character":72}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 218, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":60},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst var_ame repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":219,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0178813934326ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 219, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":220,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":71},"end":{"line":140,"character":71}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 220, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":61},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst var_name repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":221,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 221, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":222,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":72},"end":{"line":140,"character":72}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 222, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":61},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst var_name repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar)  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":61}}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":223,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":144,"character":66},"end":{"line":144,"character":66}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0331401824951ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 223, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":224,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":84},"end":{"line":143,"character":84}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0259876251221ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 224, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":62},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst var_name repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar),  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":225,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 225, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":226,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":85},"end":{"line":143,"character":85}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0259876251221ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 226, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":227,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":57}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00882148742676ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 227, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":228,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":57},"end":{"line":140,"character":57}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0231266021729ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 228, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":62},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst var_name repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar),  ex2))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":62}}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":229,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":57},"end":{"line":140,"character":57}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0219345092773ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 229, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":230,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":57},"end":{"line":140,"character":57}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 230, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":231,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":141,"character":57}}}
[server] Got a method textDocument/hover
[server] processing took 0.0278949737549ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 231, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":232,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":59}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 232, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":233,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":140,"character":64}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 233, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":234,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":140,"character":0},"end":{"line":141,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 234, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":235,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":144,"character":66},"end":{"line":144,"character":66}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0278949737549ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 235, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":236,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":63}}}
[server] Got a method textDocument/hover
[server] processing took 0.0269412994385ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 236, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":237,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":144,"character":57}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 237, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":238,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":61}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 238, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":239,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":60}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 239, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":240,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":87}}}
[server] Got a method textDocument/hover
[server] processing took 0.0171661376953ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 240, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":241,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":143,"character":87}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 241, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":242,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":87},"end":{"line":143,"character":90}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0278949737549ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 242, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":63},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst var_name repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar),  ))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":243,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0278949737549ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 243, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":244,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":87},"end":{"line":143,"character":87}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0240802764893ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 244, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":245,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":88},"end":{"line":143,"character":88}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 245, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":246,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":144,"character":66},"end":{"line":144,"character":66}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 246, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":247,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":87},"end":{"line":143,"character":87}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 247, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":64},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst var_name repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar), ))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":65},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst var_name repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar),))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":66},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst var_name repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar)))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","id":248,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 248, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to find project root dir", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":249,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":84},"end":{"line":143,"character":84}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 249, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":250,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":84},"end":{"line":143,"character":84}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 250, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":66},"contentChanges":[{"text":"(* \n                         CS 51 Final Project\n                        MiniML -- Expressions\n*)\n\n(*......................................................................\n  Abstract syntax of MiniML expressions \n *)\n\ntype unop =\n  | Negate\n;;\n    \ntype binop =\n  | Plus\n  | Minus\n  | Times\n  | Equals\n  | LessThan\n;;\n\ntype varid = string ;;\n  \ntype expr =\n  | Var of varid                         (* variables *)\n  | Num of int                           (* integers *)\n  | Bool of bool                        (* booleans *)\n  | Unop of unop * expr                  (* unary operators *)\n  | Binop of binop * expr * expr         (* binary operators *)\n  | Conditional of expr * expr * expr    (* if then else *)\n  | Fun of varid * expr                  (* function definitions *)\n  | Let of varid * expr * expr           (* local naming *)\n  | Letrec of varid * expr * expr        (* recursive local naming *)\n  | Raise                                (* exceptions *)\n  | Unassigned                           (* (temporarily) unassigned *)\n  | App of expr * expr                   (* function applications *)\n;;\n\n\n\n\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex->\n  | Binop op, ex1, ex2 ->\n  | Conditional ex1, ex2, ex3 ->\n  | Fun vaid, ex ->\n  | Let vaid, e1, ex2 ->\n  | Letrec vaid, e1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n\n\n\n  \n(*......................................................................\n  Manipulation of variable names (varids)\n *)\n\n(* varidset -- Sets of varids *)\nmodule SS = Set.Make (struct\n                       type t = varid\n                       let compare = String.compare\n                     end ) ;;\n\ntype varidset = SS.t ;;\n\n(* same_vars :  varidset -> varidset -> bool\n   Test to see if two sets of variables have the same elements (for\n   testing purposes) *)\nlet same_vars : varidset -> varidset -> bool =\n  SS.equal;;\n\n(* vars_of_list : string list -> varidset\n   Generate a set of variable names from a list of strings (for\n   testing purposes) *)\nlet vars_of_list : string list -> varidset =\n  SS.of_list ;;\n  \n(* free_vars : expr -> varidset\n   Return a set of the variable names that are free in expression\n   exp *)\nlet rec free_vars (exp : expr) : varidset =\n  match exp with\n  | Var a -> SS.singleton a\n  | Num a ->  SS.empty\n  | Bool a ->  SS.empty\n  | Unop op, ex-> free_vars ex\n  | Binop op, ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n  | Conditional ex1, ex2, ex3 -> SS.union (SS.union (free_vars ex1)  (free_vars ex2)) (free_vars ex3)\n  | Fun vaid, ex -> SS.remove vaid (free_vars ex)\n  | Let vaid, ex1, ex2 -> SS.union (SS.remove vaid (free_vars ex2)) (free_vars ex1)\n  | Letrec vaid, ex1, ex2 -> SS.remove vaid (SS.union (free_vars ex2)) (free_vars ex1)\n  | Raise -> SS.empty\n  | Unassigned -> SS.empty\n  | App ex1, ex2 -> SS.union (free_vars ex1) (free_vars ex2)\n;;\n  \n(* new_varname : unit -> varid\n   Return a fresh variable, constructed with a running counter a la\n   gensym. Assumes no variable names use the prefix \"var\". (Otherwise,\n   they might accidentally be the same as a generated variable name.) *)\n\nlet num = ref 0;\n\nlet new_varname () : varid =\n  num := !num + 1;\n  Var !num ;;\n\n(*......................................................................\n  Substitution \n\n  Substitution of expressions for free occurrences of variables is the\n  cornerstone of the substitution model for functional programming\n  semantics.\n *)\n\n(* subst : varid -> expr -> expr -> expr\n   Substitute repl for free occurrences of var_name in exp *)\n\n  \nlet rec subst (var_name : varid) (repl : expr) (exp : expr) : expr =\n  match exp with\n  | Var a -> if a = var_name then repl else exp\n  | Num a ->  Num a\n  | Bool a ->  Bool a\n  | Unop op, ex-> Unop(op, (subst var_name repl ex))\n  | Binop op, ex1, ex2 -> Binop(op, (subst var_name repl ex1), (subst var_name repl ex2))\n  | Conditional ex1, ex2, ex3 -> Conditional((subst var_name repl ex1), (subst var_name repl ex2), (subst var_name repl ex3))\n  | Fun vaid, ex -> if vaid = var_name then exp \n                    else if SS.mem vaid (free_vars repl) then \n                      let newVar = new_varname in\n                        Fun(newVar, subst var_name repl (subst vaid newVar exp))\n                    else Fun(vaid, (subst var_name repl exp))\n  | Let vaid, ex1, ex2 -> if vaid = var_name then Let(vaid, (subst var_name repl ex1), ex2) \n                    else if SS.mem vaid (free_vars repl) then\n                      let newVar = new_varname in\n                        Let(newVar, (subst newVar repl ex1), (subst vaid Var(newVar)))\n                    else Let(vaid, (subst var_name repl ex1, ex2))\n  | Letrec vaid, ex1, ex2 ->\n  | Raise ex ->\n  | Unassigned ex ->\n  | App ex1, ex2 ->\n;;\n\n(*......................................................................\n  String representations of expressions\n *)\n   \n    \n(* exp_to_concrete_string : expr -> string\n   Returns a concrete syntax string representation of the expr *)\nlet rec exp_to_concrete_string (exp : expr) : string =\n  match exp with\n  | Var a -> a\n  | Num a ->  string_of_int a\n  | Bool a ->  string_of_bool a\n  | Unop op, ex-> match op with\n                  | Negate -> \"(-)\"  ^ (exp_to_concrete_string ex)\n  | Binop op, ex1, ex2 -> let exp1, exp2 = (exp_to_concrete_string ex1), (exp_to_concrete_string ex2) in \n                          match op with\n                          | Plus -> exp1 ^ \"(+)\" ^ exp2\n                          | Minus -> exp1 ^ \"(-)\" ^ exp2\n                          | Times -> exp1 ^ \"(*)\" ^ exp2\n                          | Equals -> exp1 ^ \"(=)\" ^ exp2\n                          | LessThan -> exp1 ^ \"(<)\" ^ exp2\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> vaid ^ (exp_to_concrete_string ex)\n  | Let vaid, ex1, ex2 -> \"Let \" ^ (exp_to_concrete_string ex1) ^ \" = \" ^ (exp_to_concrete_string ex2)\n  | Letrec vaid, ex1, ex2 -> \"Letrec \" ^ vaid ^ \"=\" ^(exp_to_concrete_string ex1) ^ \" -> \" ^ (exp_to_concrete_string ex2)\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unnasigned\"\n  | App ex1, ex2 -> (exp_to_concrete_string ex1) ^ \" \" ^ (exp_to_concrete_string ex2)\n;;\n\n(* exp_to_abstract_string : expr -> string\n   Returns a string representation of the abstract syntax of the expr *)\nlet exp_to_abstract_string (exp : expr) : string =\n   match exp with\n  | Var a -> \"Var(\" ^ a ^ \")\"\n  | Num a ->  \"Num(\" ^ string_of_int a ^ \")\"\n  | Bool a ->  \"Bool(\" ^ string_of_bool a ^ \")\"\n  | Unop op, ex-> match op with\n                  | Negate -> \"Negate(\" ^ (exp_to_concrete_string expr) ^ \")\"\n  | Binop op, ex1, ex2 -> let operation = match op with\n                                          | Plus -> \"Plus\"\n                                          | Minus -> \"Minus\"\n                                          | Times -> \"Times\"\n                                          | Equals -> \"Equals\"\n                                          | LessThan -> \"LessThan\" in\n                                          \"Binop(\" ^ operation ^ \", \" (exp_to_concrete_string ex1) ^ \", \" (exp_to_concrete_string ex2) ^ \")\"\n  | Conditional ex1, ex2, ex3 -> (exp_to_concrete_string ex1) ^ (exp_to_concrete_string ex2) ^ (exp_to_concrete_string ex3)\n  | Fun vaid, ex -> \"Fun(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex) ^ \")\"\n  | Let vaid, ex1, ex2 -> \"Let(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Letrec vaid, ex1, ex2 -> \"Letrec(\" ^ vaid ^ \", \" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n  | Raise -> \"Raise\"\n  | Unassigned -> \"Unassigned\"\n  | App ex1, ex2 -> \"App(\" ^ (exp_to_concrete_string ex1) ^ \", \" ^ (exp_to_concrete_string ex2) ^ \")\"\n;;\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml","version":66}}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":251,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":84},"end":{"line":143,"character":84}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 251, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Read message 
{"jsonrpc":"2.0","id":252,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"range":{"start":{"line":143,"character":84},"end":{"line":143,"character":84}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 252, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":253,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":135,"character":11}}}
[server] Got a method textDocument/definition
[server] processing took 0.0178813934326ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 253, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":254,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":135,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 254, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":255,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/josephokeefe/Documents/JUNK/workspace/cs51/project/expr.ml"},"position":{"line":135,"character":11}}}
[server] Got a method textDocument/definition
[server] processing took 0.0162124633789ms
Found a `.merlin` file at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
]] Making a new jbuilder package at /Users/josephokeefe/Documents/JUNK/workspace/cs51/project
Sending response {"id": 255, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":256,"method":"shutdown","params":null}
Sending response {"id": 256, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"exit","params":null}
Got exit! Terminating loop
Finished
